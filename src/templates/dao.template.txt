/**
 * --- This file is generated by Profiler file generator ---
 */

import QueryBuilder from "../../controllers/queryGenerator";
import { Database } from "../../database";
import { QueryFilters } from "../../models/types";

export interface {{.InterfaceName}} {{.InterfaceSchema}}

export interface {{.FiltersInterfaceName}} {{.FiltersInterfaceSchema}}

export interface {{.MetaInterfaceName}} extends {{.InterfaceName}} {}

/**
 * @class {{.ClassName}}
 */
class {{.ClassName}} {

    public static LIST_QUERY = `{{.ListQuery}}`;

    public static FILTERS_MODEL: QueryFilters = {
        {{.FILTERS_MODEL}}
    };

    /**
     * @author {{.Author}} ({{.Date}})
     * @param { Database } db regular db connection
     * @returns { Promise<number> }
     */
    public static insertOne(db: Database, payload: {{.InterfaceName}}): Promise<number> {
        return {{.ClassName}}.insertMany(db, [payload]);
    }

    /**
     * @author {{.Author}} ({{.Date}})
     * @param { Database } db regular db connection
     * @returns { Promise<number> }
     */
    public static async insertMany(db: Database, payload: {{.InterfaceName}}[]): Promise<number> {
        const sql = `{{.InsertQuery}}`;
        const values = {{.InsertValues}}
        const result = (await db.executeQuery(sql, values)) as { insertId: number };
        return result.insertId;
    }

    /**
     * @author {{.Author}} ({{.Date}})
     * @param { Database } db regular db connection
     * @returns { Promise<number> }
     */
    public static async list(db: Database, filters: Partial<{{.FiltersInterfaceName}}> = {}): Promise<{
        data: {{.MetaInterfaceName}}[],
        nextCursor: number,
        recordsPerPage: number
    }> {
        const recordsPerPage = 20;
        const { constraints, queryArray } = QueryBuilder(filters, {{.ClassName}}.FILTERS_MODEL);
        const sql = `${ {{.ClassName}}.LIST_QUERY } ${
            constraints.length ? ` WHERE ${constraints.join(" AND ")} ` : ``
        } DESC LIMIT ${recordsPerPage + 1}`;
        const data = (await db.executeQuery(sql, queryArray)) as {{.MetaInterfaceName}}[];
        const nextCursor = data.length > recordsPerPage ? data.pop().id : null;
        return {
            data,
            nextCursor,
            recordsPerPage,
        };
    }

}

export default {{.ClassName}};
